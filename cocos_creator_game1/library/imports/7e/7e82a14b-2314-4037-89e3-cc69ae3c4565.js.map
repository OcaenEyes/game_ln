{"version":3,"sources":["assets\\Script\\star.js"],"names":["cc","Class","Component","properties","pickRadius","start","update","dt","getPlayerDistance","onPicked","opacityRatio","game","timer","starDuration","minOpacity","node","opacity","Math","floor","playerPos","player","getPosition","dist","position","sub","mag","spawnNewStar","gainScore","destroy"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,UAAU,EAAE;AAhBJ,GAHP;AAsBL;AAEA;AAEAC,EAAAA,KA1BK,mBA0BG,CAEP,CA5BI;AA8BLC,EAAAA,MA9BK,kBA8BEC,EA9BF,EA8BM;AACP,QAAI,KAAKC,iBAAL,KAA2B,KAAKJ,UAApC,EAAgD;AAC5C,WAAKK,QAAL;AACA;AACH;;AAED,QAAIC,YAAY,GAAG,IAAI,KAAKC,IAAL,CAAUC,KAAV,GAAkB,KAAKD,IAAL,CAAUE,YAAnD;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,SAAKC,IAAL,CAAUC,OAAV,GAAoBF,UAAU,GAAGG,IAAI,CAACC,KAAL,CAAWR,YAAY,IAAI,MAAMI,UAAV,CAAvB,CAAjC;AACH,GAvCI;AAwCLN,EAAAA,iBAAiB,EAAE,6BAAY;AAC3B,QAAIW,SAAS,GAAG,KAAKR,IAAL,CAAUS,MAAV,CAAiBC,WAAjB,EAAhB;AACA,QAAIC,IAAI,GAAG,KAAKP,IAAL,CAAUQ,QAAV,CAAmBC,GAAnB,CAAuBL,SAAvB,EAAkCM,GAAlC,EAAX;AACA,WAAOH,IAAP;AACH,GA5CI;AA8CLb,EAAAA,QAAQ,EAAE,oBAAY;AAClB,SAAKE,IAAL,CAAUe,YAAV;AACA,SAAKf,IAAL,CAAUgB,SAAV;AACA,SAAKZ,IAAL,CAAUa,OAAV;AACH;AAlDI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        pickRadius: 0,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start() {\r\n\r\n    },\r\n\r\n    update(dt) {\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            this.onPicked();\r\n            return;\r\n        }\r\n\r\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\r\n        var minOpacity = 50;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n    },\r\n    getPlayerDistance: function () {\r\n        var playerPos = this.game.player.getPosition();\r\n        var dist = this.node.position.sub(playerPos).mag();\r\n        return dist;\r\n    },\r\n\r\n    onPicked: function () {\r\n        this.game.spawnNewStar();\r\n        this.game.gainScore();\r\n        this.node.destroy();\r\n    },\r\n\r\n});\r\n"]}